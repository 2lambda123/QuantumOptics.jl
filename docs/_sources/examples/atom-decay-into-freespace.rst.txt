
.. code:: julia

    using QuantumOptics
    using PyPlot

.. code:: julia

    xmin = -6
    xmax = 6
    Nsteps = 150
    
    index_coupling = Int(floor(Nsteps/2))
    L = xmax - xmin
    dx = L/(Nsteps + 1)
    E0 = 10 # Irrelevant
    g_light = 1/2dx
    g = 0.4g_light
    
    b_position = PositionBasis(xmin, xmax, Nsteps)
    xpoints = samplepoints(b_position)
    
    b_mb = ManyBodyBasis(b_position, bosonstates(b_position, [0, 1]))
    
    b_atom = NLevelBasis(2)
    # H_atom = diagonaloperator(b_atom, [0, E0])
    t12 = transition(b_atom, 1, 2)
    t21 = transition(b_atom, 2, 1)
    
    at_1 = create(b_mb, index_coupling)
    a_1 = destroy(b_mb, index_coupling)
    
    I_atom_x0 = g*(t12 ⊗ at_1 + t21 ⊗ a_1)
    
    I_x = SparseOperator(b_mb)
    for i = 1:length(b_position)-1
        I_x += g_light*(transition(b_mb, i, i+1) + transition(b_mb, i+1, i))
    end
    # for i = 1:length(b_position)
    #     I_x += E0*number(b_mb, i)
    # end
    
    
    H = embed(b_atom ⊗ b_mb, 2, I_x) + I_atom_x0;

.. code:: julia

    vac = basisstate(b_mb, zeros(Int, length(b_position)))
    excitedstate = basisstate(b_atom, 2)
    psi_0 = excitedstate ⊗ vac
    
    T = [0:1.:5;]
    tout, psi_t = timeevolution.schroedinger(T, psi_0, H);
    # tout, psi_t = timeevolution.master(T, psi_0, H, J);

.. code:: julia

    """
    Sparse operator |x_i><x_i| in position basis.
    """
    function nx(b::PositionBasis, i)
        op = SparseOperator(b)
        op.data[i, i] = 1.
        op
    end
    
    """
    Probability density in the position basis of the given many body state.
    """
    function probabilitydensity_x(state, indices)
        n = Vector{Float64}(length(indices))
        for i=1:length(indices)
            nx_i = nx(b_position, indices[i])
            nx_i_mb = manybodyoperator(b_mb, nx_i)
            n[i] = real(expect(nx_i_mb, state))
        end
        n
    end;

.. code:: julia

    dx = Int(ceil(length(b_position)/100))
    dx=1
    indices = [1:dx:length(b_position);]
    for i=2:length(T)
        n = probabilitydensity_x(ptrace(psi_t[i], 1), indices)
        subplot(length(T), 1, i)
        plot(xpoints[indices], n, "C0")
    end



.. image:: atom-decay-into-freespace_files/atom-decay-into-freespace_4_0.png


.. code:: julia

    plot(T, expect(2, number(b_mb), psi_t))
    plot(T, expect(1, excitedstate⊗dagger(excitedstate), psi_t))



.. image:: atom-decay-into-freespace_files/atom-decay-into-freespace_5_0.png




.. parsed-literal::

    1-element Array{Any,1}:
     PyObject <matplotlib.lines.Line2D object at 0x7f4927e26e48>


.. _example-atom-decay-into-freespace:


