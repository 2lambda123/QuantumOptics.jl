
*This notebook can be found on*
`github <https://github.com/bastikr/QuantumOptics.jl/blob/master/examples/correlation-spectrum.ipynb>`__

.. _example-correlation-spectrum:

Two-time correlation function and spectrum of a Fock state
==========================================================

Consider a Fock state of :math:`n` photons inside a damped cavity, that
undergoes the free dynamics. The Hamiltonian is

:math:`H = -\Delta a^\dagger a`,

while the damping is described by the Lindblad term

:math:`\mathcal{L}[\rho] = \kappa\left(2a\rho a^\dagger - a^\dagger a \rho - \rho a^\dagger a\right)`.

Here, the detuning
:math:`\Delta = \omega_\mathrm{r} - \omega_\mathrm{c}` is the detuning
between the cavity frequency :math:`\omega_\mathrm{c}` with respect to
some reference frequency :math:`\omega_\mathrm{r}`. We chose this simple
example, since it can be solved analytically. We do this by writing down
the Heisenberg equation of motion for the operator :math:`a`,

:math:`\dot{a} = \left(i\Delta - \kappa\right)a`,

which has the solution

:math:`a(t) = a(0) e^{\left(i\Delta - \kappa\right)t}`.

Inserting this into the definition of the two-time correlation function,
we find

:math:`g(\tau) = \langle a^\dagger(\tau) a(0)\rangle = \langle a^\dagger(\tau) a(0)\rangle e^{-i\Delta\tau}e^{-\kappa\tau} = n e^{-i\Delta\tau}e^{-\kappa\tau}`,

where :math:`n` is the photon number of the initial state.

Therefore, we find by the Wiener-Khinchin theorem that the spectrum is

:math:`S(\omega) = 2\Re\left\{\int_0^{\infty} d\tau e^{-i\omega\tau}g(\tau) \right\} = 2\Re\left\{\frac{n\left(-i(\omega + \Delta) + \kappa\right)}{\left(\omega + \Delta\right)^2 + \kappa^2}\right\} = \frac{2n\kappa}{(\omega + \Delta)^2 + \kappa^2}`.

In the following program, we check this result with the implemented
functions in the module timecorrelations.jl

As usual, we start by including the libraries we require. In order to
save us some code typing, we substitute the functions from the
timecorrelations module.

.. code:: julia

    using QuantumOptics
    correlation = timecorrelations.correlation
    corr2spec = timecorrelations.correlation2spectrum
    using PyPlot

Next, we define the necessary parameters. In this example, we use a Fock
state containing :math:`n=4` photons.

.. code:: julia

    Nc = 10
    κ = 1.0
    n = 4
    Δ = 5.0κ;

After defining our basis and the annihilation operator :math:`a`, we can
write down the Hamiltonian and the jump operators.

.. code:: julia

    basis = FockBasis(Nc)
    
    a = destroy(basis)
    H = -Δ*dagger(a)*a
    J = [sqrt(2κ)*a];

Defining the initial density matrix :math:`\rho_0` corresponding to the
:math:`n` photon Fock state, we can calculate the correlation function
for a list of times :math:`\tau`. Note, that in theory, when calculating
the spectrum, the integral goes to infinite times. Obviously, we require
a finite time numerically, but we set it sufficiently large.

.. code:: julia

    ρ₀ = fockstate(basis, n) ⊗ dagger(fockstate(basis, n))
    
    dτ = 0.05
    τmax = 1000
    τ = [0:dτ:τmax;]
    corr = correlation(τ, ρ₀, H, J, dagger(a), a);

The function timecorrelations.spectrum calculates the correlation
internally by solving the corresponding time evolution. Since we already
calculated the correlation, it is more efficient to use
timecorrelations.correlation2spectrum, which in our shorthand notation
is corr2spec. This function only performs the necessary Fourier
transform.

.. code:: julia

    ω, spec = corr2spec(τ, corr; normalize=true);

Finally, we implement the analytical results we obtained in the
beginning.

.. code:: julia

    corr_an = n.*exp(-1.0im*Δ.*τ).*exp(-κ.*τ)
    spec_an = 2n*κ./((Δ + ω).^2 + κ^2)
    spec_an ./= maximum(spec_an);

.. code:: julia

    figure(figsize=(9, 3))
    subplot(121)
    plot(ω, spec, label="numerical")
    plot(ω, spec_an, ls="dashed", label="analytical")
    xlabel("freq.")
    ylabel("spectrum")
    subplot(122)
    plot(τ[1:200], real(corr[1:200]))
    plot(τ[1:200], real(corr_an[1:200]), ls="dashed")
    xlabel("time")
    ylabel("correlation")
    show()



.. image:: correlation-spectrum_files/correlation-spectrum_14_0.png


Note, that the discrepancy in the base line of the spectrum stems from
numerical errors, namely the fact that the time- and frequency steps and
also the final time are finite. Reducing :math:`d\tau` and increasing
:math:`\tau`\ max reduces the error.

